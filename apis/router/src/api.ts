import express from 'express';
import { Router } from 'express';

// Create an Express application
const app = express();
const PORT = 81;

// Define the defaultResponse object (same as in your Elysia.js code)
const defaultResponse = {
  tokens: [
    {
      address: '0x0000000000000000000000000000000000000000',
      symbol: 'BERA',
      name: 'BERA Token',
      decimals: 18,
    },
    {
      address: '0x6969696969696969696969696969696969696969',
      symbol: 'WBERA',
      name: 'Wrapped Bera',
      decimals: 18,
    },
    {
      address: '0x009af46Df68DB0E76BFe9EA35663f6Ed17877956',
      symbol: 'OOGA',
      name: 'OogaBooga Token',
      decimals: 18,
    },
  ],
  tokenFrom: 0,
  tokenTo: 2,
  swapPrice: 25.953935920455805,
  priceImpact: -0.024698808443696985,
  amountIn: '491677000000000000',
  assumedAmountOut: '12760953351561949184',
  amountOutFee: '0',
  gasSpent: 460095,
  competitors: [
    {
      source: 'Bex',
      amountOut: '0',
    },
    {
      source: 'Kodiak',
      amountOut: '12760953351561945088',
    },
  ],
  route: [
    {
      poolAddress: '0x6969696969696969696969696969696969696969',
      liquidityProvider: 'NativeWrap',
      poolFee: 0,
      tokenFrom: 0,
      tokenTo: 1,
      share: 1,
      assumedAmountIn: '491677000000000000',
      assumedAmountOut: '491677000000000000',
    },
    {
      poolAddress: '0x51F92915e44Bb9D7f90f59c9CE559F09e338e7e9',
      liquidityProvider: 'KodiakV3',
      poolFee: 0.01,
      tokenFrom: 1,
      tokenTo: 2,
      share: 1,
      assumedAmountIn: '491677000000000000',
      assumedAmountOut: '12760953351561949184',
    },
  ],
  status: 'Success',
  blockNumber: 5409702,
  hasExecutionArgs: true,
  routerAddr: '0xFd88aD4849BA0F729D6fF4bC27Ff948Ab1Ac3dE7',
  routerArgs: {
    swapTokenInfo: {
      inputToken: '0x0000000000000000000000000000000000000000',
      inputAmount: '491677000000000000',
      outputToken: '0x009af46Df68DB0E76BFe9EA35663f6Ed17877956',
      outputQuote: '12760953351561949184',
      outputMin: '12697148584804139438',
      outputReceiver: '0xc91E7af2E874A2e04183908AdD8b5c3bDb515CFC',
    },
    pathDefinition:
      '0x009af46Df68DB0E76BFe9EA35663f6Ed1787795600000000000000000000000000000000000000000000000000b11803767b2e30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b11803767b2e20000301ffff0201415744995e9D35A00189C216c37546E9139F5C2c696969696969696969696969696969696969696901696969696969696969696969696969696969696901ffff0151F92915e44Bb9D7f90f59c9CE559F09e338e7e900415744995e9D35A00189C216c37546E9139F5C2c',
    executor: '0x415744995e9D35A00189C216c37546E9139F5C2c',
    referralCode: 1,
    txdata:
      '0xd46cadbc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006d2c9a0613ad000000000000000000000000000009af46df68db0e76bfe9ea35663f6ed17877956000000000000000000000000000000000000000000000000b11803767b2e3000000000000000000000000000000000000000000000000000b035555d919ac1ae000000000000000000000000c91e7af2e874a2e04183908add8b5c3bdb515cfc0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000415744995e9d35a00189c216c37546e9139f5c2c000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e5009af46Df68DB0E76BFe9EA35663f6Ed1787795600000000000000000000000000000000000000000000000000b11803767b2e30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b11803767b2e20000301ffff0201415744995e9D35A00189C216c37546E9139F5C2c696969696969696969696969696969696969696901696969696969696969696969696969696969696901ffff0151F92915e44Bb9D7f90f59c9CE559F09e338e7e900415744995e9D35A00189C216c37546E9139F5C2c000000000000000000000000000000000000000000000000000000',
    value: '491677000000000000',
  },
};

// Create a router for the swap functionality
const swapRouter = Router();

// Define the GET route for /swap
swapRouter.get('/swap', (req, res) => {
  res.json(defaultResponse);
});

// Mount the swap router under the /route prefix
app.use('/route', swapRouter);

// Start the Express server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});